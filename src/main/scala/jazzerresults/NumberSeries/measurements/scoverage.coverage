# Coverage data, format version: 2.0
# Statement data:
# - id
# - source path
# - package name
# - class name
# - class type (Class, Object or Trait)
# - full class name
# - method name
# - start offset
# - end offset
# - line number
# - symbol name
# - tree name
# - is branch
# - invocations count
# - is ignored
# - description (can be multi-line)
# '' sign
# ------------------------------------------
1
/home/ahmad/jazzer/src/main/scala/examples/faulty/NumberSeries.scala
examples.faulty
NumberSeries
Object
examples.faulty.NumberSeries
main
151
166
8
abstraction.SparkConf.<init>
Apply
false
0
false
new abstraction.SparkConf()

2
/home/ahmad/jazzer/src/main/scala/examples/faulty/NumberSeries.scala
examples.faulty
NumberSeries
Object
examples.faulty.NumberSeries
main
171
197
9
abstraction.SparkConf.setMaster
Apply
false
0
false
conf.setMaster("local[*]")

3
/home/ahmad/jazzer/src/main/scala/examples/faulty/NumberSeries.scala
examples.faulty
NumberSeries
Object
examples.faulty.NumberSeries
main
202
233
10
abstraction.SparkConf.setAppName
Apply
false
0
false
conf.setAppName("NumberSeries")

4
/home/ahmad/jazzer/src/main/scala/examples/faulty/NumberSeries.scala
examples.faulty
NumberSeries
Object
examples.faulty.NumberSeries
main
249
271
13
abstraction.SparkContext.<init>
Apply
false
0
false
new abstraction.SparkContext(conf)

5
/home/ahmad/jazzer/src/main/scala/examples/faulty/NumberSeries.scala
examples.faulty
NumberSeries
Object
examples.faulty.NumberSeries
main
277
975
44
abstraction.RDD.collect
Apply
false
0
false
sc.textFile(args.apply(0)).map[Array[String]](((x$1: String) => x$1.split(",")))((ClassTag.apply[Array[String]](scala.runtime.ScalaRunTime.arrayClass(classOf[java.lang.String])): scala.reflect.ClassTag[Array[String]])).map[Int](((s: Array[String]) => scala.Predef.augmentString(s.apply(1)).toInt))((ClassTag.Int: scala.reflect.ClassTag[Int])).map[(Int, Int)](((l: Int) => {
  var dis: Int = 1;
  var tmp: Int = l;
  if (l.<=(0))
    dis = 0
  else
    while$1(){
      if (tmp.!=(1).&&(dis.<(30)))
        {
          {
            if (tmp.%(2).==(0))
              tmp = tmp./(2)
            else
              tmp = 3.*(tmp).+(1);
            dis = dis.+(1)
          };
          while$1()
        }
      else
        ()
    };
  if (l.>(2563523).&&(l.<(3563523)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  scala.Tuple2.apply[Int, Int](l, dis)
}))((ClassTag.apply[(Int, Int)](classOf[scala.Tuple2]): scala.reflect.ClassTag[(Int, Int)])).filter(((x0$1: (Int, Int)) => x0$1 match {
  case (_1: Int, _2: Int)(Int, Int)((l @ _), (m @ _)) => {
    if (l.>(5563523).&&(l.<(6563523)))
      throw new scala.`package`.RuntimeException()
    else
      ();
    m.equals(25)
  }
})).collect()

6
/home/ahmad/jazzer/src/main/scala/examples/faulty/NumberSeries.scala
examples.faulty
NumberSeries
Object
examples.faulty.NumberSeries
main
991
998
45
scala.Predef.println
Apply
false
0
false
scala.Predef.println(x)

7
/home/ahmad/jazzer/src/main/scala/examples/faulty/NumberSeries.scala
examples.faulty
NumberSeries
Object
examples.faulty.NumberSeries
main
277
999
45
scala.collection.IndexedSeqOptimized.foreach
Apply
false
0
false
scala.Predef.refArrayOps[(Int, Int)](sc.textFile(args.apply(0)).map[Array[String]](((x$1: String) => x$1.split(",")))((ClassTag.apply[Array[String]](scala.runtime.ScalaRunTime.arrayClass(classOf[java.lang.String])): scala.reflect.ClassTag[Array[String]])).map[Int](((s: Array[String]) => scala.Predef.augmentString(s.apply(1)).toInt))((ClassTag.Int: scala.reflect.ClassTag[Int])).map[(Int, Int)](((l: Int) => {
  var dis: Int = 1;
  var tmp: Int = l;
  if (l.<=(0))
    dis = 0
  else
    while$1(){
      if (tmp.!=(1).&&(dis.<(30)))
        {
          {
            if (tmp.%(2).==(0))
              tmp = tmp./(2)
            else
              tmp = 3.*(tmp).+(1);
            dis = dis.+(1)
          };
          while$1()
        }
      else
        ()
    };
  if (l.>(2563523).&&(l.<(3563523)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  scala.Tuple2.apply[Int, Int](l, dis)
}))((ClassTag.apply[(Int, Int)](classOf[scala.Tuple2]): scala.reflect.ClassTag[(Int, Int)])).filter(((x0$1: (Int, Int)) => x0$1 match {
  case (_1: Int, _2: Int)(Int, Int)((l @ _), (m @ _)) => {
    if (l.>(5563523).&&(l.<(6563523)))
      throw new scala.`package`.RuntimeException()
    else
      ();
    m.equals(25)
  }
})).collect()).foreach[Unit]({
  ((x: Any) => scala.Predef.println(x))
})

