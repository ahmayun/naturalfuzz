# Coverage data, format version: 2.0
# Statement data:
# - id
# - source path
# - package name
# - class name
# - class type (Class, Object or Trait)
# - full class name
# - method name
# - start offset
# - end offset
# - line number
# - symbol name
# - tree name
# - is branch
# - invocations count
# - is ignored
# - description (can be multi-line)
# '' sign
# ------------------------------------------
1
/home/ahmad/jazzer/src/main/scala/examples/faulty/AgeAnalysis.scala
examples.faulty
AgeAnalysis
Object
examples.faulty.AgeAnalysis
main
150
165
8
abstraction.SparkConf.<init>
Apply
false
0
false
new abstraction.SparkConf()

2
/home/ahmad/jazzer/src/main/scala/examples/faulty/AgeAnalysis.scala
examples.faulty
AgeAnalysis
Object
examples.faulty.AgeAnalysis
main
170
196
9
abstraction.SparkConf.setMaster
Apply
false
0
false
conf.setMaster("local[*]")

3
/home/ahmad/jazzer/src/main/scala/examples/faulty/AgeAnalysis.scala
examples.faulty
AgeAnalysis
Object
examples.faulty.AgeAnalysis
main
201
231
10
abstraction.SparkConf.setAppName
Apply
false
0
false
conf.setAppName("AgeAnalysis")

4
/home/ahmad/jazzer/src/main/scala/examples/faulty/AgeAnalysis.scala
examples.faulty
AgeAnalysis
Object
examples.faulty.AgeAnalysis
main
246
268
12
abstraction.SparkContext.<init>
Apply
false
0
false
new abstraction.SparkContext(conf)

5
/home/ahmad/jazzer/src/main/scala/examples/faulty/AgeAnalysis.scala
examples.faulty
AgeAnalysis
Object
examples.faulty.AgeAnalysis
main
274
977
36
abstraction.RDD.collect
Apply
false
0
false
sc.textFile(args.apply(0)).map[Array[String]](((x$1: String) => x$1.split(",")))((ClassTag.apply[Array[String]](scala.runtime.ScalaRunTime.arrayClass(classOf[java.lang.String])): scala.reflect.ClassTag[Array[String]])).map[(String, Int, Int)](((cols: Array[String]) => scala.Tuple3.apply[String, Int, Int](cols.apply(0), scala.Predef.augmentString(cols.apply(1)).toInt, scala.Predef.augmentString(cols.apply(2)).toInt)))((ClassTag.apply[(String, Int, Int)](classOf[scala.Tuple3]): scala.reflect.ClassTag[(String, Int, Int)])).filter(((s: (String, Int, Int)) => {
  if (scala.Predef.augmentString(s._1).toInt.>(4328520).&&(scala.Predef.augmentString(s._1).toInt.<(5328520)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  s._1.equals("90024")
})).map[(String, Int)](((s: (String, Int, Int)) => if (s._2.>=(40).&(s._2.<=(65)))
  scala.Tuple2.apply[String, Int]("40-65", s._3)
else
  if (s._2.>=(20).&(s._2.<(40)))
    scala.Tuple2.apply[String, Int]("20-39", s._3)
  else
    if (s._2.<(20))
      scala.Tuple2.apply[String, Int]("0-19", s._3)
    else
      scala.Tuple2.apply[String, Int](">65", s._3./(0))))((ClassTag.apply[(String, Int)](classOf[scala.Tuple2]): scala.reflect.ClassTag[(String, Int)])).collect()

6
/home/ahmad/jazzer/src/main/scala/examples/faulty/AgeAnalysis.scala
examples.faulty
AgeAnalysis
Object
examples.faulty.AgeAnalysis
main
993
1000
37
scala.Predef.println
Apply
false
0
false
scala.Predef.println(x)

7
/home/ahmad/jazzer/src/main/scala/examples/faulty/AgeAnalysis.scala
examples.faulty
AgeAnalysis
Object
examples.faulty.AgeAnalysis
main
274
1001
37
scala.collection.IndexedSeqOptimized.foreach
Apply
false
0
false
scala.Predef.refArrayOps[(String, Int)](sc.textFile(args.apply(0)).map[Array[String]](((x$1: String) => x$1.split(",")))((ClassTag.apply[Array[String]](scala.runtime.ScalaRunTime.arrayClass(classOf[java.lang.String])): scala.reflect.ClassTag[Array[String]])).map[(String, Int, Int)](((cols: Array[String]) => scala.Tuple3.apply[String, Int, Int](cols.apply(0), scala.Predef.augmentString(cols.apply(1)).toInt, scala.Predef.augmentString(cols.apply(2)).toInt)))((ClassTag.apply[(String, Int, Int)](classOf[scala.Tuple3]): scala.reflect.ClassTag[(String, Int, Int)])).filter(((s: (String, Int, Int)) => {
  if (scala.Predef.augmentString(s._1).toInt.>(4328520).&&(scala.Predef.augmentString(s._1).toInt.<(5328520)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  s._1.equals("90024")
})).map[(String, Int)](((s: (String, Int, Int)) => if (s._2.>=(40).&(s._2.<=(65)))
  scala.Tuple2.apply[String, Int]("40-65", s._3)
else
  if (s._2.>=(20).&(s._2.<(40)))
    scala.Tuple2.apply[String, Int]("20-39", s._3)
  else
    if (s._2.<(20))
      scala.Tuple2.apply[String, Int]("0-19", s._3)
    else
      scala.Tuple2.apply[String, Int](">65", s._3./(0))))((ClassTag.apply[(String, Int)](classOf[scala.Tuple2]): scala.reflect.ClassTag[(String, Int)])).collect()).foreach[Unit]({
  ((x: Any) => scala.Predef.println(x))
})

