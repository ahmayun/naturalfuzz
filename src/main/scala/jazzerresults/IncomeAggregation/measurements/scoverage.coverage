# Coverage data, format version: 2.0
# Statement data:
# - id
# - source path
# - package name
# - class name
# - class type (Class, Object or Trait)
# - full class name
# - method name
# - start offset
# - end offset
# - line number
# - symbol name
# - tree name
# - is branch
# - invocations count
# - is ignored
# - description (can be multi-line)
# '' sign
# ------------------------------------------
1
/home/ahmad/jazzer/src/main/scala/examples/faulty/IncomeAggregation.scala
examples.faulty
IncomeAggregation
Object
examples.faulty.IncomeAggregation
main
156
171
8
abstraction.SparkConf.<init>
Apply
false
0
false
new abstraction.SparkConf()

2
/home/ahmad/jazzer/src/main/scala/examples/faulty/IncomeAggregation.scala
examples.faulty
IncomeAggregation
Object
examples.faulty.IncomeAggregation
main
176
202
9
abstraction.SparkConf.setMaster
Apply
false
0
false
conf.setMaster("local[*]")

3
/home/ahmad/jazzer/src/main/scala/examples/faulty/IncomeAggregation.scala
examples.faulty
IncomeAggregation
Object
examples.faulty.IncomeAggregation
main
207
243
10
abstraction.SparkConf.setAppName
Apply
false
0
false
conf.setAppName("IncomeAggregation")

4
/home/ahmad/jazzer/src/main/scala/examples/faulty/IncomeAggregation.scala
examples.faulty
IncomeAggregation
Object
examples.faulty.IncomeAggregation
main
258
280
12
abstraction.SparkContext.<init>
Apply
false
0
false
new abstraction.SparkContext(conf)

5
/home/ahmad/jazzer/src/main/scala/examples/faulty/IncomeAggregation.scala
examples.faulty
IncomeAggregation
Object
examples.faulty.IncomeAggregation
main
286
1311
44
abstraction.RDD.collect
Apply
false
0
false
abstraction.this.RDD.toPairRDD[String, (Int, Int)](sc.textFile(args.apply(0)).map[Array[String]](((x$1: String) => x$1.split(",")))((ClassTag.apply[Array[String]](scala.runtime.ScalaRunTime.arrayClass(classOf[java.lang.String])): scala.reflect.ClassTag[Array[String]])).map[(String, Int, Int)](((cols: Array[String]) => scala.Tuple3.apply[String, Int, Int](cols.apply(0), scala.Predef.augmentString(cols.apply(1)).toInt, scala.Predef.augmentString(cols.apply(2)).toInt)))((ClassTag.apply[(String, Int, Int)](classOf[scala.Tuple3]): scala.reflect.ClassTag[(String, Int, Int)])).filter(((s: (String, Int, Int)) => {
  if (scala.Predef.augmentString(s._1).toInt.>(4328520).&&(scala.Predef.augmentString(s._1).toInt.<(5328520)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  s._1.equals("90024")
})).map[(String, (Int, Int))](((s: (String, Int, Int)) => if (s._2.>=(40).&(s._2.<=(65)))
  scala.Tuple2.apply[String, (Int, Int)]("40-65", scala.Tuple2.apply[Int, Int](s._3, 1))
else
  if (s._2.>=(20).&(s._2.<(40)))
    scala.Tuple2.apply[String, (Int, Int)]("20-39", scala.Tuple2.apply[Int, Int](s._3, 1))
  else
    if (s._2.<(20))
      scala.Tuple2.apply[String, (Int, Int)]("0-19", scala.Tuple2.apply[Int, Int](s._3, 1))
    else
      scala.Tuple2.apply[String, (Int, Int)](">65", scala.Tuple2.apply[Int, Int](s._3./(0), 1))))((ClassTag.apply[(String, (Int, Int))](classOf[scala.Tuple2]): scala.reflect.ClassTag[(String, (Int, Int))])))((ClassTag.apply[String](classOf[java.lang.String]): scala.reflect.ClassTag[String]), (ClassTag.apply[(Int, Int)](classOf[scala.Tuple2]): scala.reflect.ClassTag[(Int, Int)])).reduceByKey(((x: (Int, Int), y: (Int, Int)) => {
  if (y._1.>(2332452).&&(y._1.<(4332452)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  scala.Tuple2.apply[Int, Int](x._1.+(y._1), x._2.+(y._2))
})).mapValues[(Int, Double)](((x: (Int, Int)) => {
  if (x._1.>(23324520).&&(x._1.<(29342525)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  scala.Tuple2.apply[Int, Double](x._2, x._1.toDouble./(x._2.toDouble))
})).collect()

6
/home/ahmad/jazzer/src/main/scala/examples/faulty/IncomeAggregation.scala
examples.faulty
IncomeAggregation
Object
examples.faulty.IncomeAggregation
main
1327
1334
45
scala.Predef.println
Apply
false
0
false
scala.Predef.println(x)

7
/home/ahmad/jazzer/src/main/scala/examples/faulty/IncomeAggregation.scala
examples.faulty
IncomeAggregation
Object
examples.faulty.IncomeAggregation
main
286
1335
45
scala.collection.IndexedSeqOptimized.foreach
Apply
false
0
false
scala.Predef.refArrayOps[(String, (Int, Double))](abstraction.this.RDD.toPairRDD[String, (Int, Int)](sc.textFile(args.apply(0)).map[Array[String]](((x$1: String) => x$1.split(",")))((ClassTag.apply[Array[String]](scala.runtime.ScalaRunTime.arrayClass(classOf[java.lang.String])): scala.reflect.ClassTag[Array[String]])).map[(String, Int, Int)](((cols: Array[String]) => scala.Tuple3.apply[String, Int, Int](cols.apply(0), scala.Predef.augmentString(cols.apply(1)).toInt, scala.Predef.augmentString(cols.apply(2)).toInt)))((ClassTag.apply[(String, Int, Int)](classOf[scala.Tuple3]): scala.reflect.ClassTag[(String, Int, Int)])).filter(((s: (String, Int, Int)) => {
  if (scala.Predef.augmentString(s._1).toInt.>(4328520).&&(scala.Predef.augmentString(s._1).toInt.<(5328520)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  s._1.equals("90024")
})).map[(String, (Int, Int))](((s: (String, Int, Int)) => if (s._2.>=(40).&(s._2.<=(65)))
  scala.Tuple2.apply[String, (Int, Int)]("40-65", scala.Tuple2.apply[Int, Int](s._3, 1))
else
  if (s._2.>=(20).&(s._2.<(40)))
    scala.Tuple2.apply[String, (Int, Int)]("20-39", scala.Tuple2.apply[Int, Int](s._3, 1))
  else
    if (s._2.<(20))
      scala.Tuple2.apply[String, (Int, Int)]("0-19", scala.Tuple2.apply[Int, Int](s._3, 1))
    else
      scala.Tuple2.apply[String, (Int, Int)](">65", scala.Tuple2.apply[Int, Int](s._3./(0), 1))))((ClassTag.apply[(String, (Int, Int))](classOf[scala.Tuple2]): scala.reflect.ClassTag[(String, (Int, Int))])))((ClassTag.apply[String](classOf[java.lang.String]): scala.reflect.ClassTag[String]), (ClassTag.apply[(Int, Int)](classOf[scala.Tuple2]): scala.reflect.ClassTag[(Int, Int)])).reduceByKey(((x: (Int, Int), y: (Int, Int)) => {
  if (y._1.>(2332452).&&(y._1.<(4332452)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  scala.Tuple2.apply[Int, Int](x._1.+(y._1), x._2.+(y._2))
})).mapValues[(Int, Double)](((x: (Int, Int)) => {
  if (x._1.>(23324520).&&(x._1.<(29342525)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  scala.Tuple2.apply[Int, Double](x._2, x._1.toDouble./(x._2.toDouble))
})).collect()).foreach[Unit]({
  ((x: Any) => scala.Predef.println(x))
})

