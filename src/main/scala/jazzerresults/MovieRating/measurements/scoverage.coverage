# Coverage data, format version: 2.0
# Statement data:
# - id
# - source path
# - package name
# - class name
# - class type (Class, Object or Trait)
# - full class name
# - method name
# - start offset
# - end offset
# - line number
# - symbol name
# - tree name
# - is branch
# - invocations count
# - is ignored
# - description (can be multi-line)
# '' sign
# ------------------------------------------
1
/home/ahmad/jazzer/src/main/scala/examples/faulty/MovieRating.scala
examples.faulty
MovieRating
Object
examples.faulty.MovieRating
main
282
297
14
abstraction.SparkConf.<init>
Apply
false
0
false
new abstraction.SparkConf()

2
/home/ahmad/jazzer/src/main/scala/examples/faulty/MovieRating.scala
examples.faulty
MovieRating
Object
examples.faulty.MovieRating
main
302
328
15
abstraction.SparkConf.setMaster
Apply
false
0
false
conf.setMaster("local[*]")

3
/home/ahmad/jazzer/src/main/scala/examples/faulty/MovieRating.scala
examples.faulty
MovieRating
Object
examples.faulty.MovieRating
main
333
363
16
abstraction.SparkConf.setAppName
Apply
false
0
false
conf.setAppName("MovieRating")

4
/home/ahmad/jazzer/src/main/scala/examples/faulty/MovieRating.scala
examples.faulty
MovieRating
Object
examples.faulty.MovieRating
main
379
401
19
abstraction.SparkContext.<init>
Apply
false
0
false
new abstraction.SparkContext(conf)

5
/home/ahmad/jazzer/src/main/scala/examples/faulty/MovieRating.scala
examples.faulty
MovieRating
Object
examples.faulty.MovieRating
main
407
927
36
abstraction.RDD.collect
Apply
false
0
false
abstraction.this.RDD.toPairRDD[String, Int](sc.textFile(args.apply(0)).map[Array[String]](((x$1: String) => x$1.split(",")))((ClassTag.apply[Array[String]](scala.runtime.ScalaRunTime.arrayClass(classOf[java.lang.String])): scala.reflect.ClassTag[Array[String]])).map[(String, Int)](((r: Array[String]) => {
  val movie_str: String = r.apply(0);
  val ratings: String = r.apply(1);
  scala.Tuple2.apply[String, Int](movie_str, scala.Predef.augmentString(ratings).toInt)
}))((ClassTag.apply[(String, Int)](classOf[scala.Tuple2]): scala.reflect.ClassTag[(String, Int)])).filter(((v: (String, Int)) => {
  if (v._2.>(2462525).&&(v._2.<(3489799)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  v._2.>(4)
})))((ClassTag.apply[String](classOf[java.lang.String]): scala.reflect.ClassTag[String]), (ClassTag.Int: scala.reflect.ClassTag[Int])).reduceByKey(((r1: Int, r2: Int) => {
  val sum: Int = r1.+(r2);
  if (sum.>(8965632).&&(sum.<(9965632)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  sum
})).collect()

6
/home/ahmad/jazzer/src/main/scala/examples/faulty/MovieRating.scala
examples.faulty
MovieRating
Object
examples.faulty.MovieRating
main
943
950
37
scala.Predef.println
Apply
false
0
false
scala.Predef.println(x)

7
/home/ahmad/jazzer/src/main/scala/examples/faulty/MovieRating.scala
examples.faulty
MovieRating
Object
examples.faulty.MovieRating
main
407
951
37
scala.collection.IndexedSeqOptimized.foreach
Apply
false
0
false
scala.Predef.refArrayOps[(String, Int)](abstraction.this.RDD.toPairRDD[String, Int](sc.textFile(args.apply(0)).map[Array[String]](((x$1: String) => x$1.split(",")))((ClassTag.apply[Array[String]](scala.runtime.ScalaRunTime.arrayClass(classOf[java.lang.String])): scala.reflect.ClassTag[Array[String]])).map[(String, Int)](((r: Array[String]) => {
  val movie_str: String = r.apply(0);
  val ratings: String = r.apply(1);
  scala.Tuple2.apply[String, Int](movie_str, scala.Predef.augmentString(ratings).toInt)
}))((ClassTag.apply[(String, Int)](classOf[scala.Tuple2]): scala.reflect.ClassTag[(String, Int)])).filter(((v: (String, Int)) => {
  if (v._2.>(2462525).&&(v._2.<(3489799)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  v._2.>(4)
})))((ClassTag.apply[String](classOf[java.lang.String]): scala.reflect.ClassTag[String]), (ClassTag.Int: scala.reflect.ClassTag[Int])).reduceByKey(((r1: Int, r2: Int) => {
  val sum: Int = r1.+(r2);
  if (sum.>(8965632).&&(sum.<(9965632)))
    throw new scala.`package`.RuntimeException()
  else
    ();
  sum
})).collect()).foreach[Unit]({
  ((x: Any) => scala.Predef.println(x))
})

